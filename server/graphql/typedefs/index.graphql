# import * from "user.graphql"
# import * from "client.graphql"
# import * from "ticket.graphql"
# import * from "truck.graphql"
# import * from "rock.graphql"
# import * from "folio.graphql"
# import * from "post.graphql"
# import * from "message.graphql"
# import * from "turn.graphql"
# import * from "others.graphql"

# Enums

# Scalars
scalar Date
scalar Upload

# Directives
directive @auth(roles: [Role]) on FIELD_DEFINITION

type Query {
  # User
  user(id: ID!): User # @auth(roles: [ADMIN, COLLABORATOR, ARTISAN])
  users(filters: UserFilters!): [User!]!
  # Client
  client(id: ID!): Client
  clients(filters: ClientFilters!): [Client!]!
  # Ticket
  ticket(id: ID!): Ticket
  tickets(filters: TicketFilters!): [Ticket!]!
  activeTickets(filters: TicketFilters!): [Ticket!]!
  archivedTickets(filters: ArchivedTicketFilters!): [ArchiveTicket!]!
  archivedTicketsReport(filters: ArchivedTicketFilters!): String!
  # Truck
  truck(id: ID, plates: String): Truck
  trucks(filters: TruckFilters!): [Truck!]!
  # Rock
  rock(id: ID!): Rock
  rocks(filters: RockFilters!): [Rock!]!
  # Post
  post(id: ID!): Post
  posts(filters: PostFilters!): [Post!]!
  # Message
  message(id: ID!): Message
  messages(filters: MessageFilters!): [Message!]!
  # Turn
  turn(id: ID!): Turn
  turns(filters: TurnFilters!): [Turn!]!
  turnActive: Turn
  turnSummary: TurnSummary! @auth(roles: [ADMIN, CASHIER])
}

type Mutation {
  # User
  user(user: UserRegisterInput!): User!
  login(user: UserLogin!): String!
  userEdit(user: UserEditInput!): User @auth(roles: [ADMIN])
  # Client
  client(client: ClientInput!): Client @auth(roles: [ADMIN, CASHIER])
  clientEdit(client: ClientEditInput!): Client @auth(roles: [ADMIN, CASHIER])
  clientDelete(id: ID!): Boolean! @auth(roles: [ADMIN, CASHIER])
  # Ticket
  ticket(ticket: TicketInput!): Ticket @auth(roles: [ADMIN, CASHIER, GUARD])
  ticketInit(ticket: TicketInitInput!): Ticket! @auth(roles: [ADMIN, CASHIER, GUARD])
  ticketProductLoad(ticket: TicketProductLoadInput!): Ticket! @auth(roles: [ADMIN, CASHIER, GUARD])
  ticketSubmit(ticket: TicketSubmitInput!): Ticket! @auth(roles: [ADMIN, CASHIER, GUARD])
  # Truck
  truck(truck: TruckInput!): Truck @auth(roles: [ADMIN, CASHIER])
  truckEdit(truck: TruckEditInput!): Truck @auth(roles: [ADMIN, CASHIER])
  truckDelete(id: ID!): Boolean! @auth(roles: [ADMIN, CASHIER])
  # Rock
  rock(rock: RockInput!): Rock @auth(roles: [ADMIN])
  rockEdit(rock: RockEditInput!): Rock @auth(roles: [ADMIN, CASHIER])
  # Folio
  folio(folio: FolioInput!): Folio @auth(roles: [ADMIN])
  # Post
  post(post: PostInput!): Post @auth(roles: [ADMIN])
  # Message
  message(message: MessageInput!): Message @auth(roles: [ADMIN, CASHIER, GUARD])
  # Turn
  turnInit(turn: TurnInitInput!): Turn @auth(roles: [ADMIN, CASHIER])
  turnEnd(turn: TurnEndInput!): Turn @auth(roles: [ADMIN, CASHIER])
  turnAddTicket(turn: TurnAddTicket!): Turn @auth(roles: [ADMIN, CASHIER])
  # Misc
  fileUpload(file: String!, folderKey: s3FolderKey!, id: ID!): String!
  imageUpload(image: String!, folderKey: s3FolderKey!, id: ID!): String!

}

type Subscription {
  newTicket: Ticket! @auth(roles: [ADMIN, CASHIER])
  ticketUpdate: Ticket! @auth(roles: [ADMIN, CASHIER])
  activeTickets: [Ticket!]! @auth(roles: [ADMIN, CASHIER, GUARD])
  newPost: Post! @auth(roles: [ADMIN, CASHIER])
  newMessage: Message! @auth(roles: [ADMIN, CASHIER])
  turnUpdate: Turn! @auth(roles: [ADMIN, CASHIER])
}
