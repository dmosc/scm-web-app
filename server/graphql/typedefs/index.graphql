# import * from "user.graphql"
# import * from "client.graphql"
# import * from "client-price.graphql"
# import * from "client-credit-limit.graphql"
# import * from "ticket.graphql"
# import * from "bill.graphql"
# import * from "truck.graphql"
# import * from "rock.graphql"
# import * from "folio.graphql"
# import * from "post.graphql"
# import * from "message.graphql"
# import * from "turn.graphql"
# import * from "price-request.graphql"
# import * from "rock-price-request.graphql"
# import * from "machine.graphql"
# import * from "machine-diesel-load.graphql"
# import * from "tank-diesel-load.graphql"
# import * from "store.graphql"
# import * from "others.graphql"

# Enums

# Scalars
scalar Date
scalar Upload

# Directives
directive @auth(roles: [Role]) on FIELD_DEFINITION

type Query {
  # User
  user(id: ID!): User @auth(roles: [ADMIN, CASHIER, GUARD, LOADER, ACCOUNTANT, MANAGER, SUPPORT])
  users(filters: UserFilters!): [User!]! @auth(roles: [ADMIN, ACCOUNTANT, MANAGER, SUPPORT])
  # Client
  client(id: ID!): Client @auth(roles: [ADMIN, ACCOUNTANT, SUPPORT, MANAGER])
  clients(filters: ClientFilters!): [Client!]! @auth(roles: [ADMIN, ACCOUNTANT, SUPPORT, MANAGER])
  clientsXLS(filters: ClientFilters!): String! @auth(roles: [ADMIN, ACCOUNTANT, SUPPORT, MANAGER])
  clientsPendingTicketsToBill: [ClientPendingBill!]!
    @auth(roles: [ADMIN, ACCOUNTANT, SUPPORT, MANAGER])
  # Client Price
  clientPricesByClient(client: ID!): [ClientPrice!]!
    @auth(roles: [ADMIN, ACCOUNTANT, SUPPORT, MANAGER])
  clientPriceByClient(client: ID!, rock: ID!): ClientPrice
    @auth(roles: [ADMIN, ACCOUNTANT, SUPPORT, MANAGER])
  clientPriceHistoryByClient(client: ID!, rock: ID): [ClientPrice!]!
    @auth(roles: [ADMIN, ACCOUNTANT, SUPPORT, MANAGER])
  # Client Credit Limit
  clientCreditLimit(client: ID!): ClientCreditLimit
    @auth(roles: [ADMIN, ACCOUNTANT, SUPPORT, MANAGER])
  clientCreditLimitHistory(client: ID!): [ClientCreditLimit!]!
    @auth(roles: [ADMIN, ACCOUNTANT, SUPPORT, MANAGER])
  # Ticket
  ticket(id: ID!): Ticket
    @auth(roles: [ADMIN, CASHIER, GUARD, LOADER, ACCOUNTANT, MANAGER, SUPPORT])
  tickets(filters: TicketFilters!): [Ticket!]!
    @auth(roles: [ADMIN, CASHIER, GUARD, LOADER, MANAGER, SUPPORT])
  activeTickets(filters: TicketFilters!): [Ticket!]!
    @auth(roles: [ADMIN, CASHIER, GUARD, LOADER, MANAGER, SUPPORT])
  disabledTickets(filters: DisabledTicketFilters!): [Ticket!]!
    @auth(roles: [ADMIN, CASHIER, MANAGER])
  notLoadedActiveTickets(filters: TicketFilters!): [Ticket!]! @auth(roles: [ADMIN, LOADER, MANAGER])
  loadedTickets(filters: TicketFilters!): [Ticket!]! @auth(roles: [ADMIN, LOADER, MANAGER])
  ticketsPendingToBill(client: ID!, type: ArchivedTicketType!): [Ticket!]!
    @auth(roles: [ADMIN, ACCOUNTANT, MANAGER])
  ticketsToBillSummary(tickets: [ID!]!, client: ID!): BillSummary!
    @auth(roles: [ADMIN, ACCOUNTANT, MANAGER])
  archivedTickets(filters: ArchivedTicketFilters!): [ArchiveTicket!]!
    @auth(roles: [ADMIN, ACCOUNTANT, SUPPORT, MANAGER])
  archivedTicketsXLS(filters: ArchivedTicketFilters!): String!
    @auth(roles: [ADMIN, ACCOUNTANT, SUPPORT, MANAGER])
  # Bill
  bill(id: ID, folio: String): Bill
    @auth(roles: [ADMIN, CASHIER, GUARD, LOADER, ACCOUNTANT, MANAGER, SUPPORT])
  bills(filters: BillFilters!): [Bill!]!
    @auth(roles: [ADMIN, CASHIER, GUARD, LOADER, ACCOUNTANT, MANAGER, SUPPORT])
  # Truck
  truck(id: ID, plates: String, client: ID!): Truck
    @auth(roles: [ADMIN, CASHIER, GUARD, LOADER, ACCOUNTANT, MANAGER, SUPPORT])
  trucks(filters: TruckFilters!): [Truck!]!
    @auth(roles: [ADMIN, CASHIER, GUARD, LOADER, ACCOUNTANT, MANAGER, SUPPORT])
  similarTrucks(plates: String!): [Truck!]
    @auth(roles: [ADMIN, CASHIER, GUARD, LOADER, ACCOUNTANT, MANAGER, SUPPORT])
  truckQRCode(id: ID): String! @auth(roles: [ADMIN, LOADER, SUPPORT, MANAGER, GUARD])
  truckDecipherPlates(cipheredPlates: String!): String!
    @auth(roles: [ADMIN, LOADER, SUPPORT, MANAGER, GUARD])
  trucksXLS(filters: TruckFilters!): String!
    @auth(roles: [ADMIN, CASHIER, GUARD, LOADER, ACCOUNTANT, MANAGER, SUPPORT])
  # Rock
  rock(id: ID!): Rock @auth(roles: [ADMIN, CASHIER, GUARD, LOADER, ACCOUNTANT, MANAGER, SUPPORT])
  rocks(filters: RockFilters!): [Rock!]!
    @auth(roles: [ADMIN, CASHIER, GUARD, LOADER, ACCOUNTANT, MANAGER, SUPPORT])
  rockSalesReport(filters: RockSalesReportFilters!): RockSalesReport!
    @auth(roles: [ADMIN, ACCOUNTANT, SUPPORT, MANAGER])
  rockMonthSalesReport(filters: RockSalesReportFilters!): RockMonthSalesReport!
    @auth(roles: [ADMIN, ACCOUNTANT, SUPPORT, MANAGER])
  # Post
  post(id: ID!): Post @auth(roles: [ADMIN, CASHIER, GUARD, LOADER, ACCOUNTANT, MANAGER, SUPPORT])
  posts(filters: PostFilters!): [Post!]!
    @auth(roles: [ADMIN, CASHIER, GUARD, LOADER, ACCOUNTANT, MANAGER, SUPPORT])
  # Message
  message(id: ID!): Message @auth(roles: [ADMIN, CASHIER, LOADER, ACCOUNTANT, MANAGER, SUPPORT])
  messages(filters: MessageFilters!): [Message!]!
    @auth(roles: [ADMIN, CASHIER, LOADER, ACCOUNTANT, MANAGER, SUPPORT])
  # Turn
  turn(id: ID!): Turn @auth(roles: [ADMIN, CASHIER, ACCOUNTANT, SUPPORT, MANAGER])
  turns(filters: TurnFilters!): [Turn!]!
    @auth(roles: [ADMIN, CASHIER, ACCOUNTANT, SUPPORT, MANAGER])
  turnActive: Turn @auth(roles: [ADMIN, CASHIER, ACCOUNTANT, SUPPORT, MANAGER])
  turnSummary(uniqueId: Int!, ticketType: TicketType): TurnSummary!
    @auth(roles: [ADMIN, CASHIER, ACCOUNTANT, SUPPORT, MANAGER])
  turnSummaryXLS(uniqueId: Int!, ticketType: TicketType): String!
    @auth(roles: [ADMIN, CASHIER, ACCOUNTANT, SUPPORT, MANAGER])
  turnMostRecentlyEnded: Turn! @auth(roles: [ADMIN, CASHIER, ACCOUNTANT, SUPPORT, MANAGER])
  turnByUniqueId(uniqueId: Int!): Turn! @auth(roles: [ADMIN, CASHIER, ACCOUNTANT, SUPPORT, MANAGER])
  # Price request
  priceRequest(id: ID!): PriceRequest @auth(roles: [ADMIN, ACCOUNTANT, SUPPORT, MANAGER])
  priceRequests(filters: PriceRequestFilters!): [PriceRequest!]!
    @auth(roles: [ADMIN, ACCOUNTANT, SUPPORT, MANAGER])
  # Product price request
  rockPriceRequest(id: ID!): RockPriceRequest @auth(roles: [ADMIN, ACCOUNTANT, SUPPORT, MANAGER])
  rockPriceRequests(filters: RockPriceRequestFilters!): [RockPriceRequest!]!
    @auth(roles: [ADMIN, ACCOUNTANT, SUPPORT, MANAGER])
  # Store
  store(id: ID!): Store @auth(roles: [ADMIN, ACCOUNTANT, SUPPORT, MANAGER])
  stores(client: ID!): [Store!]! @auth(roles: [ADMIN, ACCOUNTANT, SUPPORT, MANAGER])
  # Machine
  machine(id: ID!): Machine
    @auth(roles: [ADMIN, CASHIER, GUARD, LOADER, ACCOUNTANT, MANAGER, SUPPORT])
  machines(filters: MachineFilters!): [Machine!]!
    @auth(roles: [ADMIN, CASHIER, GUARD, LOADER, ACCOUNTANT, MANAGER, SUPPORT])
  # Machine Diesel Load
  machineDieselLoad(id: ID!): MachineDieselLoad
    @auth(roles: [ADMIN, CASHIER, GUARD, LOADER, ACCOUNTANT, MANAGER, SUPPORT])
  machineDieselLoads(filters: MachineDieselLoadFilters!): [MachineDieselLoad!]!
    @auth(roles: [ADMIN, CASHIER, GUARD, LOADER, ACCOUNTANT, MANAGER, SUPPORT])
  # Tank Diesel Load
  tankDieselLoad(id: ID!): TankDieselLoad
    @auth(roles: [ADMIN, CASHIER, GUARD, LOADER, ACCOUNTANT, MANAGER, SUPPORT])
  tankDieselLoads(filters: TankDieselLoadFilters!): [TankDieselLoad!]!
    @auth(roles: [ADMIN, CASHIER, GUARD, LOADER, ACCOUNTANT, MANAGER, SUPPORT])
}

type Mutation {
  # User
  user(user: UserRegisterInput!): User!
  login(user: UserLogin!): String!
  userEdit(user: UserEditInput!): User @auth(roles: [ADMIN, MANAGER, SUPPORT])
  # Client
  client(client: ClientInput!): Client @auth(roles: [ADMIN, CASHIER])
  clientAddToBalance(client: ID!, toAdd: Float!): Client
    @auth(roles: [ADMIN, MANAGER, SUPPORT, CASHIER])
  clientEdit(client: ClientEditInput!): Client @auth(roles: [ADMIN, MANAGER, SUPPORT, CASHIER])
  clientDelete(id: ID!): Boolean! @auth(roles: [ADMIN, MANAGER, CASHIER])
  # Client Price
  clientPrice(clientPrice: ClientPriceInput!): ClientPrice! @auth(roles: [ADMIN, MANAGER, SUPPORT])
  # Client Credit Limit
  clientCreditLimit(clientCreditLimit: ClientCreditLimitInput): ClientCreditLimit
    @auth(roles: [ADMIN, MANAGER, SUPPORT])
  # Ticket
  ticket(ticket: TicketInput!): Ticket
    @auth(roles: [ADMIN, CASHIER, GUARD, LOADER, MANAGER, SUPPORT])
  ticketEdit(ticket: TicketEditInput!): Ticket
    @auth(roles: [ADMIN, CASHIER, GUARD, LOADER, MANAGER, SUPPORT])
  ticketInit(ticket: TicketInitInput!): Ticket!
    @auth(roles: [ADMIN, CASHIER, GUARD, LOADER, MANAGER, SUPPORT])
  ticketProductLoad(ticket: TicketProductLoadInput!): Ticket!
    @auth(roles: [ADMIN, CASHIER, LOADER, MANAGER, SUPPORT])
  ticketProductLoadSetDate(ticket: TicketEditInput!): Ticket!
    @auth(roles: [ADMIN, CASHIER, LOADER, MANAGER, SUPPORT])
  ticketSetStore(ticket: ID!, store: ID): Boolean! @auth(roles: [ADMIN, CASHIER, MANAGER, SUPPORT])
  ticketSubmit(ticket: TicketSubmitInput!): Ticket! @auth(roles: [ADMIN, CASHIER, MANAGER, SUPPORT])
  ticketDisable(id: ID!): Boolean! @auth(roles: [ADMIN, CASHIER, MANAGER, SUPPORT])
  ticketEnable(id: ID!): Boolean! @auth(roles: [ADMIN, CASHIER, MANAGER, SUPPORT])
  # Bill
  bill(bill: BillInput!): Bill @auth(roles: [ADMIN, ACCOUNTANT])
  # Truck
  truck(truck: TruckInput!): Truck @auth(roles: [ADMIN, CASHIER])
  truckEdit(truck: TruckEditInput!): Truck @auth(roles: [ADMIN, CASHIER])
  truckDelete(id: ID!): Boolean! @auth(roles: [ADMIN, CASHIER])
  # Rock
  rock(rock: RockInput!): Rock @auth(roles: [ADMIN])
  rockEdit(rock: RockEditInput!): Rock @auth(roles: [ADMIN])
  rockDelete(id: ID!): Boolean! @auth(roles: [ADMIN])
  # Folio
  folio(folio: FolioInput!): Folio @auth(roles: [ADMIN])
  # Post
  post(post: PostInput!): Post @auth(roles: [ADMIN, MANAGER])
  # Message
  message(message: MessageInput!): Message
    @auth(roles: [ADMIN, CASHIER, LOADER, ACCOUNTANT, MANAGER, SUPPORT])
  # Turn
  turnInit(turn: TurnInitInput!): Turn @auth(roles: [ADMIN, CASHIER, MANAGER])
  turnEnd(turn: TurnEndInput!): Turn @auth(roles: [ADMIN, CASHIER, MANAGER])
  turnAddTicket(turn: TurnAddTicket!): Turn @auth(roles: [ADMIN, CASHIER, MANAGER])
  # Price Request
  priceRequest(priceRequest: PriceRequestInput!): PriceRequest
    @auth(roles: [ADMIN, ACCOUNTANT, MANAGER])
  priceRequestEdit(priceRequest: PriceRequestEditInput!): PriceRequest
    @auth(roles: [ADMIN, ACCOUNTANT])
  # Rock price request
  rockPriceRequest(rockPriceRequest: RockPriceRequestInput!): RockPriceRequest
    @auth(roles: [ADMIN, ACCOUNTANT, MANAGER])
  rockPriceRequestEdit(rockPriceRequest: RockPriceRequestEditInput!): RockPriceRequest
    @auth(roles: [ADMIN, ACCOUNTANT])
  # Store
  store(store: StoreInput!): Store @auth(roles: [ADMIN, ACCOUNTANT, MANAGER])
  storeEdit(store: StoreEditInput!): Store @auth(roles: [ADMIN, ACCOUNTANT, MANAGER])
  storeDelete(id: ID!): Boolean! @auth(roles: [ADMIN, ACCOUNTANT, MANAGER])
  # Machine
  machine(machine: MachineInput!): Machine @auth(roles: [ADMIN, ACCOUNTANT, SUPPORT, MANAGER])
  machineEdit(machine: MachineEditInput!): Machine
    @auth(roles: [ADMIN, ACCOUNTANT, SUPPORT, MANAGER])
  # Machine Diesel Load
  machineDieselLoad(machineDieselLoad: MachineDieselLoadInput!): MachineDieselLoad
    @auth(roles: [ADMIN, ACCOUNTANT, SUPPORT, MANAGER])
  # Tank Diesel Load
  tankDieselLoad(tankDieselLoad: TankDieselLoadInput!): TankDieselLoad
    @auth(roles: [ADMIN, ACCOUNTANT, SUPPORT, MANAGER])
  # Misc
  fileUpload(file: String!, folderKey: s3FolderKey!, id: ID!): String!
  imageUpload(image: String!, folderKey: s3FolderKey!, id: ID!): String!
    @auth(roles: [ADMIN, CASHIER, GUARD])
}

type Subscription {
  newTicket: Ticket! @auth(roles: [ADMIN, CASHIER, MANAGER, SUPPORT])
  ticketUpdate: Ticket! @auth(roles: [ADMIN, CASHIER, MANAGER, SUPPORT, LOADER])
  activeTickets: [Ticket!]! @auth(roles: [ADMIN, CASHIER, MANAGER, SUPPORT, GUARD, LOADER])
  notLoadedActiveTickets: [Ticket!]! @auth(roles: [ADMIN, CASHIER, MANAGER, SUPPORT, GUARD, LOADER])
  loadedTickets: [Ticket!]! @auth(roles: [ADMIN, CASHIER, MANAGER, SUPPORT, GUARD, LOADER])
  newPost: Post! @auth(roles: [ADMIN, CASHIER, MANAGER, SUPPORT, ACCOUNTANT])
  newMessage: Message! @auth(roles: [ADMIN, CASHIER, MANAGER, SUPPORT, ACCOUNTANT])
  turnUpdate: Turn! @auth(roles: [ADMIN, CASHIER, MANAGER, SUPPORT])
}
