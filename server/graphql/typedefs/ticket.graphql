# Types
type Ticket {
  id: ID!
  folio: String
  driver: String
  client: Client
  truck: Truck
  product: Rock
  store: Store
  promotion: Promotion
  tax: Float
  weight: Float
  totalWeight: Float
  totalPrice: Float
  credit: Boolean
  in: Date
  out: Date
  load: Date
  inTruckImage: String
  inTruckImageLeft: String
  inTruckImageRight: String
  outTruckImage: String
  outTruckImageBack: String
  bill: Boolean!
  isBilled: Boolean
  usersInvolved: UsersInvolved
  turn: Turn
  disabledAt: Date
  time: Int # This only works in ticketTimesSummary
  excludeFromTimeMetrics: Boolean
  withScale: Boolean
}

type UsersInvolved {
  guard: User
  loader: User
  cashier: User
  modifiedPrice: User
  modifiedSeries: User
}

type BillSummary {
  products: [ProductSummary!]!
  subtotal: Float!
  tax: Float!
  total: Float!
}

type ProductSummary {
  product: Rock!
  price: Float!
  weight: Float!
  total: Float!
}

type ArchiveTicket {
  id: Int!
  folio: String!
  driver: String!
  client: String!
  businessName: String!
  address: String!
  rfc: String!
  plates: String!
  truckWeight: Float!
  totalWeight: Float!
  tons: Float!
  product: String!
  price: Float!
  tax: Float!
  total: Float!
  inTruckImage: String!
  outTruckImage: String!
  createdAt: Date!
  updatedAt: Date!
}

type TicketTimes {
  min: Int!
  max: Int!
  avg: Int!
}

# Inputs
input TicketInput {
  plates: String!
  product: ID!
}

input TicketEditInput {
  ticket: ID!
  folio: String
  driver: String
  client: ID
  truck: ID
  product: ID
  promotion: ID
  tax: Float
  weight: Float
  totalWeight: Float
  totalPrice: Float
  credit: Boolean
  in: Date
  out: Date
  load: Date
  inTruckImage: String
  outTruckImage: String
  bill: Boolean
  turn: ID
}

input TicketInitInput {
  plates: String!
  client: ID!
  product: ID!
  inTruckImage: String!
  inTruckImageLeft: String
  inTruckImageRight: String
  folderKey: s3FolderKey!
  id: ID!
}

input TicketProductLoadInput {
  id: ID!
  outTruckImage: String!
  outTruckImageBack: String
}

input TicketSubmitInput {
  id: ID!
  driver: String!
  weight: Float!
  credit: Boolean!
  bill: Boolean!
  withScale: Boolean!
  promotion: ID
}

input TicketFilters {
  client: ID
  limit: Int
  offset: Int
  search: String
  start: Date
  end: Date
  date: Date
}

input ArchivedTicketFilters {
  limit: Int
  offset: Int
  search: String
  start: Date
  end: Date
  date: Date
  type: TicketBillType
  product: String
}

input DisabledTicketFilters {
  limit: Int
  start: Date
  end: Date
}

type TicketsSummary {
  clients: [ClientTurnSummary!]
  upfront: Float
  credit: Float
  total: Float
  upfrontWeight: Float
  creditWeight: Float
}

type TicketsInRangeSummary {
  clients: [ClientTurnSummary!]
  upfront: Float
  credit: Float
  total: Float
}

input TicketSort {
  field: TicketSortField!
  order: Order!
}

# Enums
enum TicketSortField {
  folio
}

enum TicketBillType {
  BILL
  REMISSION
}

enum TicketPaymentType {
  CASH
  CREDIT
}
