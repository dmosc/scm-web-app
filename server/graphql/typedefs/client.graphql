# Types
type Client {
  id: ID!
  firstName: String
  lastName: String
  email: String
  role: Role!
  trucks: [ID!]!
  businessName: String!
  rfc: String!
  CFDIuse: CFDIuse!
  cellphone: [String!]!
  address: String!
  zipcode: String
  prices: Prices!
  credit: Float!
}

type ClientTurnSummary {
  info: Client!
  count: Int!
  tickets: [Ticket!]!
}

type Prices {
  A4B: Float
  A4D: Float
  A5: Float
  BASE: Float
  CNC: Float
  G2: Float
  MIX: Float
  SUBBASE: Float
  SELLO: Float
}

# Inputs
input ClientInput {
  firstName: String!
  lastName: String!
  email: String!
  trucks: [ID!]
  businessName: String!
  rfc: String!
  CFDIuse: CFDIuse!
  cellphone: [String!]!
  address: String!
  zipcode: String
  prices: PricesInput
  credit: Float!
}

# Inputs
input ClientEditInput {
  id: ID!
  firstName: String
  lastName: String
  email: String
  trucks: [ID]
  businessName: String
  rfc: String
  CFDIuse: CFDIuse
  cellphone: [String]
  address: String
  zipcode: String
  prices: PricesInput
  credit: Float
}

input PricesInput {
  A4B: Float
  A4D: Float
  A5: Float
  BASE: Float
  CNC: Float
  G2: Float
  G112: Float
  MIX: Float
  SUBBASE: Float
  SELLO: Float
}

input ClientFilters {
  limit: Int
  search: String
}

# Enums
enum CFDIuse {
  G01
  G03
  NE
}
